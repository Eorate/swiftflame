---

version: 2.1

executors:
  python-with-database:
    docker:
      - image: circleci/python:3.8

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6.5-alpine
        environment:
          POSTGRES_USER: myuser
          POSTGRES_DB: mydatabase
          POSTGRES_PASSWORD: ""

orbs:
  heroku: circleci/heroku@1.2.4

jobs:
  build-and-test:
    description: Build and Test
    executor: python-with-database
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      - run:
          name: Wait for db
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/venv
            . ~/venv/bin/activate
            python3 -m pip install --upgrade pip
            python3 -m pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Run tests
          command: |
            . ~/venv/bin/activate
            python3 -m pytest --cov-report xml --cov-report term --cov .

      - run:
          name: Send coverage to Code Climate
          command: |
            ./cc-test-reporter after-build --exit-code $?

      - run:
          name: Send coverage to Codecov
          command: |
            bash <(curl -s https://codecov.io/bash) -Z

  heroku/deploy-via-git:
    description: Heroku deploy
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - heroku/deploy-via-git

workflows:
  main:
    jobs:
      - build-and-test
      - heroku/deploy-via-git:
          context:
            - swiftflame-heroku-staging
          requires:
            - build-and-test
          filters:
            branches:
              only: develop
          force: true
          post-steps:
            - run:
                name: Running post-deploy
                command: |
                  /usr/local/bin/heroku run alembic upgrade head --app $HEROKU_APP_NAME
      - heroku/deploy-via-git:
          context:
            - swiftflame-heroku-production
          requires:
            - build-and-test
          filters:
            branches:
              only: main
          force: true
          pre-steps:
            - run:
                name: Running pre-deploy
                command: |
                  sudo apt update
                  sudo apt install python3-pip
                  /usr/bin/python3 -m pip install --upgrade pip
          post-steps:
            - run:
                name: Running post-deploy
                command: |
                  /usr/local/bin/heroku run alembic upgrade head --app $HEROKU_APP_NAME
                  /usr/bin/python3 -m pip install -r requirements.txt
                  git config user.email "Tharlaw@example.com"
                  git config user.name "Tharlaw"
                  semantic-release publish
